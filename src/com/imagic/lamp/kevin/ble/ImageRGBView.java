package com.imagic.lamp.kevin.ble;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.BitmapDrawable;import android.util.Log;import android.view.MotionEvent;import android.view.ViewGroup.LayoutParams;import android.widget.ImageView;public class ImageRGBView extends ImageView {	private Bitmap bitmap;	private ImageRGBDelegate delegate;	@SuppressWarnings("unused")	private int currentColor;	// 放大倍数	// private static final int FACTOR = 4;	private int currentX, currentY;	// private Matrix matrix = new Matrix();	public ImageRGBView(Context context, int image, ImageRGBDelegate delegate) {		super(context);		// TODO Auto-generated constructor stub		BitmapDrawable db = (BitmapDrawable) getResources().getDrawable(image);		bitmap = db.getBitmap();		this.setImageBitmap(bitmap);		this.setClickable(true);		this.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,				LayoutParams.WRAP_CONTENT));		this.delegate = delegate;	}	public void setPicture(Bitmap bitmap) {		this.bitmap = bitmap;		this.setImageBitmap(bitmap);	}	@Override	public boolean onTouchEvent(MotionEvent event) {		// TODO Auto-generated method stub		currentX = (int) event.getX();		currentY = (int) event.getY();		// 判断touch的部分是否在image上		if (currentX < this.getWidth() && currentX > 0 && currentY > 0				&& currentY < this.getHeight()) {			switch (event.getAction()) {			case MotionEvent.ACTION_MOVE:				invalidate();				delegate.imageColor(getColor(currentX, currentY));				break;			case MotionEvent.ACTION_DOWN:				delegate.imageColor(getColor(currentX, currentY));				break;			case MotionEvent.ACTION_UP:				delegate.imageColor(getColor(currentX, currentY));				break;			default:				break;			}		}		return super.onTouchEvent(event);	}	// @Override	// public void onDraw(Canvas canvas) {	// super.onDraw(canvas);	// // drawable.draw(canvas);	// }	/**	 * 通过坐标获取图片中的颜色值	 * 	 * @param x	 * @param y	 * @return	 */	private int getColor(int x, int y) {		int color = this.bitmap.getPixel(x, y);		int alpha = Color.alpha(color);		if (alpha != 0 || color != 0) {			this.currentColor = color;			return color;		} else {			return Color.WHITE;		}	}	/**	 * 释放内存	 */	public void recycle() {		this.bitmap.recycle();	}	public interface ImageRGBDelegate { // 获取图片的颜色		void imageColor(int color);	}}