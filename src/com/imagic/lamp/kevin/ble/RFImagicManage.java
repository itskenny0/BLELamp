package com.imagic.lamp.kevin.ble;import java.util.ArrayList;import java.util.Arrays;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.os.Handler;import com.imagic.lamp.util.Utils;/* 管理所有的 蓝牙设备  * 			功能: * 			   1)扫描所有的蓝牙设备  * 			   2)判断蓝牙权限是否打开 * @author Kevin.wu * */public class RFImagicManage implements BluetoothAdapter.LeScanCallback{	private int SCAN_TIME = 10000; // 扫描的时间为10秒	public static BluetoothAdapter bleAdapter = null;	private Handler handler = null;	private boolean isScanning = false; // 是否正在扫描	private RFImagicManageListener listener = null;	public ArrayList<RFLampDevice> scanLampDeviceArray = new ArrayList<RFLampDevice>();	private ArrayList<BluetoothDevice> scanBlueDeviceArray = new ArrayList<BluetoothDevice>(); // 扫描到的数据	public RFImagicManage() {		handler = new Handler();	}	private static RFImagicManage _instance = null;	public static RFImagicManage getInstance() {		if (_instance == null) {			_instance = new RFImagicManage();		}		return _instance;	}		public void setBluetoothAdapter(BluetoothAdapter adapter){		bleAdapter = adapter;	}	/**	 * 设置扫描的时长，默认为10秒	 */	public void setScanTime(int scanTime) {		SCAN_TIME = scanTime;	}	/**	 * 获取当前的搜索状态	 */	public boolean getScanningState() {		return isScanning;	}	/**	 * 每扫描到一个蓝牙设备调用一次	 * 	 * @param listener	 */	public void setRFstarBLEManagerListener(RFImagicManageListener listener) {		this.listener = listener;	}	/**	 * 扫描蓝牙设备	 */	public void startScanBluetoothDevice() {				if (!scanBlueDeviceArray.isEmpty()) {			scanBlueDeviceArray.clear();		}				if (!scanLampDeviceArray.isEmpty()) {			scanLampDeviceArray.clear();		}		handler.postDelayed(new Runnable() {			@Override			public void run() {				stopScanBluetoothDevice();			}		}, SCAN_TIME);		isScanning = true;		bleAdapter.startLeScan(this);		listener.RFstarBLEManageStartScan();	}	/**	 * 停止扫描蓝牙设备	 */	public void stopScanBluetoothDevice() {		if (isScanning) {			isScanning = false;			bleAdapter.stopLeScan(this);			listener.RFstarBLEManageStopScan();		}	}		public void clearBLEDevices() {		this.scanBlueDeviceArray.clear();	}		public boolean hasBLEDevice(BluetoothDevice device){		if (device == null) {			return true;		}		return this.scanBlueDeviceArray.contains(device);	}		public int getBLEDeviceCount(){		return this.scanBlueDeviceArray.size();	}		public BluetoothDevice getBLEDevice(int index) {		if (index >= 0 && index < this.scanBlueDeviceArray.size()) {			return this.scanBlueDeviceArray.get(index);		}		return null;	}		public void addBLEDevice(final BluetoothDevice device, final int rssi, final byte[] scanRecord){		if (!scanBlueDeviceArray.contains(device)) {			scanBlueDeviceArray.add(device);						int startIndex = 9;			int len = 7;			byte[] encodeByte = Arrays.copyOfRange(scanRecord, startIndex, startIndex + len + 1);			byte[] decodeByte = new byte[len];			boolean checksum = Utils.CrcDecode(len, encodeByte, decodeByte);			if (checksum) {				byte lampByte = decodeByte[len - 1];				// 信号为负数，转化为绝对值				listener.RFstarBLEManageListener(device, Math.abs(rssi), encodeByte, (int) (lampByte & 0xff));			}		}	}	public void addLampDevice(RFLampDevice device) {		this.scanLampDeviceArray.add(device);	}	public void removeLampDevice(RFLampDevice device) {		this.scanBlueDeviceArray.remove(device);	}	public ArrayList<RFLampDevice> getLampDevices() {		return this.scanLampDeviceArray;	}	public RFLampDevice getLampDeviceByBLEDevice(BluetoothDevice bleDevice) {		for (RFLampDevice tmpDevice : getLampDevices()) {			if (tmpDevice.device.equals(bleDevice)) {				return tmpDevice;			}		}		return null;	}	public void unRegisterAllDevice() {		for (RFLampDevice tmpDevice : getLampDevices()) {			if (tmpDevice.isConnected()) {				tmpDevice.ungisterReceiver();			}		}	}	@Override	public void onLeScan(final BluetoothDevice device, final int rssi, final byte[] scanRecord) {		// 添加扫描到的device，并刷新数据		handler.post(new Runnable() {			@Override			public void run() {				addBLEDevice(device, rssi, scanRecord);			}		});	}	/**	 * 用于处理，刷新到设备时更新界面	 * 	 * @author Kevin.wu	 * 	 */	public interface RFImagicManageListener {		public void RFstarBLEManageListener(BluetoothDevice device, int rssi, byte[] scanRecord, int lampType);		public void RFstarBLEManageStartScan();		public void RFstarBLEManageStopScan();	}	// // *********************************	// /*	// * 组合特征值	// *	// * @param uuid	// *	// * @return	// */	// private String getSubUUID(String uuid) {	// return "0000" + uuid + "-0000-1000-8000-00805f9b34fb";	// }}