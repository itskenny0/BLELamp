package com.imagic.lamp.kevin.ble;import java.util.Calendar;import java.util.List;import android.app.Activity;import android.app.Service;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothGattCharacteristic;import android.bluetooth.BluetoothGattService;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.os.IBinder;import android.util.Log;/* * 蓝牙设备的基类 *         功能： *           1）保存设备属性 *           2）获取设备属性 *           3）结束服务，断开连接 *           4）获取服务 *           5）监视广播的属性 *           6）数据加密 *           7）数据解密 *            * @author Kevin.wu *  */public abstract class BLEDevice {	Intent serviceIntent;	protected static final byte[] CRCPASSWORD = { 'C', 'h', 'e', 'c', 'k', 'A', 'e', 's' };	protected Context context = null;	public String deviceName = null, deviceMac = null;	protected RFImagicBLEService bleService = null;	public BluetoothDevice device = null;	public RFStarBLEBroadcastReceiver delegate = null;	public int bleDeviceType; // 灯所属的类型	public BLEDevice(Context context, BluetoothDevice device) {		this.device = device;		this.deviceName = this.device.getName();		this.deviceMac = this.device.getAddress();		this.context = context;	}	/**	 * 设置连接，绑定服务	 */	public void setBLEBroadcastDelegate(RFStarBLEBroadcastReceiver delegate) {		Log.d(RFImagicApp.KTag, "55 BLEDevice : " + device.getName() + " 初始化");		registerReceiver();		if (serviceIntent == null) {			serviceIntent = new Intent(this.context, RFImagicBLEService.class);			this.context.bindService(serviceIntent, serviceConnection, Service.BIND_AUTO_CREATE);		}		this.delegate = delegate;	}	private boolean isConnected = false;		/**	 * 是否连接	 * 	 * @return	 */	public boolean isConnected() {		return isConnected;	}	/**	 * 连接服务	 */	private ServiceConnection serviceConnection = new ServiceConnection() {		@Override		public void onServiceDisconnected(ComponentName name) {			// TODO Auto-generated method stub			bleService = null;		}		@Override		public void onServiceConnected(ComponentName name, IBinder service) {			// TODO Auto-generated method stub			// Log.d(BLEApp.KTag, "55 serviceConnected :   服务启动 ");			bleService = ((RFImagicBLEService.LocalBinder) service).getService();			bleService.initBluetoothDevice(device);			Log.w(RFImagicApp.KTag, "bbbbbbbbbbb gatt is init");		}	};	/**	 * 获取特征值	 * 	 * @param characteristic	 */	public void readValue(BluetoothGattCharacteristic characteristic) {		if (characteristic == null) {			Log.w(RFImagicApp.KTag, "55555555555 readValue characteristic is null");		} else {			bleService.readValue(this.device, characteristic);		}	}	/**	 * 根据特征值写入数据	 * 	 * @param characteristic	 */	public void writeValue(BluetoothGattCharacteristic characteristic) {		if (characteristic == null) {			Log.w(RFImagicApp.KTag, "55555555555 writeValue characteristic is null");		} else {			bleService.writeValue(this.device, characteristic);		}	}	/**	 * 消息使能	 * 	 * @param characteristic	 * @param enable	 */	public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enable) {		if (characteristic == null) {			Log.w(RFImagicApp.KTag, "55555555555 Notification characteristic is null");		} else {			bleService.setCharacteristicNotification(this.device, characteristic, enable);		}	}	/**	 * 断开连接	 */	public void disconnectedDevice() {		this.ungisterReceiver();		this.context.unbindService(serviceConnection);	}	public void closeDevice() {		this.ungisterReceiver();		this.context.unbindService(serviceConnection);	}	/**	 * 获取服务	 * 	 * @return	 */	public List<BluetoothGattService> getBLEGattServices() {		return this.bleService.getSupportedGattServices(this.device);	}	// /**	// * 保存属性	// *	// * @param baseSDevice	// */	// public abstract void setDevicePropety(BaseDevice baseSDevice);	//	// /**	// * 获取属性	// *	// * @param address	// * @return	// */	// public abstract BaseDevice getDevicePropety(String address);	/**	 * 监视广播的属性	 * 	 * @return	 */	protected IntentFilter bleIntentFilter() {		final IntentFilter intentFilter = new IntentFilter();		intentFilter.addAction(RFImagicBLEService.ACTION_GATT_CONNECTED);		intentFilter.addAction(RFImagicBLEService.ACTION_GATT_DISCONNECTED);		intentFilter.addAction(RFImagicBLEService.ACTION_GATT_SERVICES_DISCOVERED);		intentFilter.addAction(RFImagicBLEService.ACTION_DATA_AVAILABLE);		intentFilter.addAction(RFImagicBLEService.ACTION_GAT_RSSI);		intentFilter.addAction(RFImagicBLEService.ACTION_GATT_CONNECTING);		return intentFilter;	}	public interface RFStarBLEBroadcastReceiver {		/**		 * 监视蓝牙状态的广播 macData蓝牙地址的唯一识别码		 */		public void onReceive(Context context, Intent intent, String macData, String uuid);	}	/**	 * 注册监视蓝牙设备（返回数据的）广播	 */	public void registerReceiver() {		Activity activity = (Activity) this.context;		activity.registerReceiver(gattUpdateRecevice, this.bleIntentFilter());	}	/**	 * 注销监视蓝牙返回的广播	 */	public void ungisterReceiver() {		Activity activity = (Activity) this.context;		activity.unregisterReceiver(gattUpdateRecevice);		bleService = null;	}	/**	 * 初始化服务中的特征	 */	protected abstract void discoverCharacteristicsFromService();	private int countGetType = 0; // 计算获取灯类型的次数	private int countDisconted = 0; // 计算重连的次数	/**	 * 接收蓝牙广播	 */	private BroadcastReceiver gattUpdateRecevice = new BroadcastReceiver() {		@Override		public void onReceive(final Context context, Intent intent) {			// TODO Auto-generated method stub			String characteristicUUID = intent.getStringExtra(RFImagicBLEService.RFSTAR_CHARACTERISTIC_ID);			if (RFImagicBLEService.ACTION_GATT_CONNECTED.equals(intent.getAction())) {				countGetType = 0;				isConnected = true;			} else if (RFImagicBLEService.ACTION_GATT_DISCONNECTED.equals(intent.getAction())) { // 断开				if (countDisconted < 5) // 断开后重连5次				{					// TODO Auto-generated method stub					bleService.connect(device);					countDisconted++;				}				isConnected = false;			} else if (RFImagicBLEService.ACTION_GATT_SERVICES_DISCOVERED.equals(intent.getAction())) {				discoverCharacteristicsFromService();			} else if (RFImagicBLEService.ACTION_DATA_AVAILABLE.equals(intent.getAction())) {				// if (characteristicUUID				// .contains(RFLampDevice.LED_RW_GroupIDCharateristicUUID)) {				// byte[] group = intent				// .getByteArrayExtra(RFStarBLEService.EXTRA_DATA);				// if (group == null && countGetType < 6) { // 只获取6次				// // sendGroupID();				// countGetType++;				// }				// if (group.length > 2) {				// bleDeviceType = (int) group[2] & 0xff;				// Log.d(RFStarApp.KTag, "2222 type : " + bleDeviceType);				// }				// }			}			delegate.onReceive(context, intent, device.getAddress(), characteristicUUID);		}	};	public abstract void sendGroupID(); // 发送type指令	// ********************数据加密与解密**********************************	/**	 * 数据加密	 * 	 * @param arrayLengh	 * @param arrayEncode	 * @param arrayDecode	 */	public void encodeArray(byte arrayLengh, byte[] arrayEncode, byte[] arrayDecode) {		byte crcChecksum = this.crc_checksum(arrayLengh, arrayDecode);		// 生成新的的数组		arrayEncode[0] = crcChecksum;		for (int position = 0; position < arrayLengh; position++) {			arrayEncode[position + 1] = (byte) (crcChecksum ^ arrayDecode[position]);		}	}	/**	 * 数据解密	 * 	 * @param arrayLengh	 * @param encodeArray	 * @param decodeArray	 * @return	 */	public boolean decodeArray(byte arrayLengh, byte[] encodeArray, byte[] decodeArray) {		boolean checkout = false;		for (int position = 0; position < arrayLengh; position++) {			decodeArray[position] = (byte) (encodeArray[0] ^ encodeArray[1]);		}		byte crcChecksum = this.crc_checksum(arrayLengh, decodeArray);		if (crcChecksum == encodeArray[0]) {			checkout = true;		}		return checkout;	}	private byte crc_checksum(byte arrayLengh, byte[] array) {		int i, j;		byte[] crcPassword = CRCPASSWORD;		byte CRC_Checkout = 0x0;		for (i = 0; i < arrayLengh; i++) {			byte CRC_Temp = array[i];			for (j = 0; j < 8; j++) {				CRC_Temp = (byte) (CRC_Temp & 0x01);				CRC_Checkout = (byte) (CRC_Checkout ^ crcPassword[j]);				CRC_Temp = (byte) (CRC_Temp >> 1);			}		}		return CRC_Checkout;	}	public static final int d = 0x0b;	/**	 * 获取系统时间	 * 	 * @return	 */	protected byte[] getSystemTime() {		byte[] cal = new byte[7];		Calendar calendar = Calendar.getInstance();		cal[0] = (byte) (calendar.get(Calendar.YEAR) & 0xff);		cal[1] = (byte) (calendar.get(Calendar.YEAR) >> 8 & 0xff);		cal[2] = (byte) ((calendar.get(Calendar.MONTH) + 1) & 0xff);		cal[3] = (byte) (calendar.get(Calendar.DAY_OF_MONTH) & 0xff);		cal[4] = (byte) (calendar.get(Calendar.HOUR_OF_DAY) & 0xff);		cal[5] = (byte) (calendar.get(Calendar.MINUTE) & 0xff);		cal[6] = (byte) (calendar.get(Calendar.SECOND) & 0xff);		Log.d(RFImagicApp.KTag, "33333333   " + Tools.byte2Hex(cal));		return cal;	}}