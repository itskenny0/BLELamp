package com.imagic.lamp.util;public class Utils {		public static final String RFSTAR = "_rfstar";	public static final int REQUEST_CODE = 0x01;// 返回的唯一标识	/**	 * 数据加密和解密	 */	public static boolean CrcDecode(int arrayLengh, byte[] arrayEncode, byte[] arrayDecode) {		boolean checkout = false;		// 生成新的数组		for (int idx = 0; idx < arrayLengh; idx++) {			arrayDecode[idx] = (byte) (arrayEncode[0] ^ arrayEncode[idx + 1]);		}		// 计算crcChecksum		byte crcChecksum = CrcChecksum(arrayLengh, arrayDecode);		if (crcChecksum == arrayEncode[0]) {			checkout = true;		}		return checkout;	}	public static byte CrcChecksum(int arrayLengh, byte[] array) {		int i, j;		byte crcPassword[] = { 'C', 'h', 'e', 'c', 'k', 'A', 'e', 's' };		byte CRC_Checkout = 0x0;		for (i = 0; i < arrayLengh; i++) {			byte CRC_Temp = array[i];			for (j = 0; j < 8; j++) {				if (((int) CRC_Temp & 0x01) == 1) {					CRC_Checkout = (byte) (CRC_Checkout ^ crcPassword[j]);				}				CRC_Temp = (byte) (CRC_Temp >> 1);			}		}		return CRC_Checkout;	}		/**	 * 字节转十六进制 为相应的字符串显示	 */	public static String Byte2Hex(byte data[]) {		if (data != null && data.length > 0) {			StringBuilder sb = new StringBuilder(data.length);			for (byte tmp : data) {				sb.append(String.format("%02X ", tmp));			}			return sb.toString();		}		return "no data";	}}